@{
    ViewData["Title"] = "Driver Tracking";
}

<div class="header">
    <h2><i class="fas fa-map-marker-alt"></i> GPS Tracking System</h2>
    <small>Driver Location Tracking Interface</small>
</div>

<div class="controls">
    <div class="d-flex justify-content-between align-items-center flex-wrap">
        <button id="startTracking" class="btn btn-start btn-tracking">
            <i class="fas fa-play"></i> Start Tracking
        </button>
        <button id="stopTracking" class="btn btn-stop btn-tracking" disabled>
            <i class="fas fa-stop"></i> Stop Tracking
        </button>
    </div>
    
    <div class="text-center mt-2">
        <button id="refreshLocation" class="btn btn-outline-primary btn-sm" disabled>
            <i class="fas fa-sync-alt"></i> Refresh Location
        </button>
    </div>
    
    <div id="trackingStatus" class="status-info status-inactive">
        <i class="fas fa-circle"></i> Status: Not Started
    </div>
    
    <div id="locationInfo" class="location-info" style="display: none;">
        <div><strong>Current Location:</strong></div>
        <div>Latitude: <span id="currentLat">--</span></div>
        <div>Longitude: <span id="currentLng">--</span></div>
        <div>Accuracy: <span id="currentAccuracy">--</span>m</div>
        <div>Last Update: <span id="lastUpdate">--</span></div>
    </div>
    
    <div class="loading" id="loadingDiv">
        <div class="spinner"></div>
        <div>Getting location information...</div>
    </div>
</div>

<div class="map-container">
    <div id="map"></div>
</div>

@section Scripts {
<script>
class GPSTracker {
    constructor() {
        this.map = null;
        this.currentMarker = null;
        this.trackingPath = null;
        this.watchId = null;
        this.sessionId = null;
        this.isTracking = false;
        this.locationHistory = [];
        this.connection = null;
        
        this.initializeMap();
        this.initializeSignalR();
        this.bindEvents();
    }
    
    initializeMap() {
        // Initialize map, default view to Singapore
        this.map = L.map('map').setView([1.3521, 103.8198], 13);
        
        // Use OpenStreetMap as free map source
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors',
            maxZoom: 19
        }).addTo(this.map);
        
        // Add scale control
        L.control.scale().addTo(this.map);
    }
    
    async initializeSignalR() {
        try {
            this.connection = new signalR.HubConnectionBuilder()
                .withUrl("/locationHub")
                .build();
            
            await this.connection.start();
            console.log("SignalR connection successful");
            
            // Listen for location updates
            this.connection.on("LocationUpdate", (data) => {
                console.log("Received location update:", data);
            });
            
        } catch (err) {
            console.error("SignalR connection failed:", err);
        }
    }
    
    bindEvents() {
        document.getElementById('startTracking').addEventListener('click', () => {
            this.startTracking();
        });
        
        document.getElementById('stopTracking').addEventListener('click', () => {
            this.stopTracking();
        });
        
        document.getElementById('refreshLocation').addEventListener('click', () => {
            this.refreshLocation();
        });
    }
    
    async startTracking() {
        if (!navigator.geolocation) {
            alert('Your browser does not support geolocation features');
            return;
        }
        
        try {
            this.showLoading(true);
            
            // 启动追踪会话
            const response = await fetch('/Driver/StartTracking', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.sessionId = result.sessionId;
                this.isTracking = true;
                this.updateTrackingStatus('Tracking', true);
                
                // Start location watch
                this.startLocationWatch();
                
                document.getElementById('startTracking').disabled = true;
                document.getElementById('stopTracking').disabled = false;
                document.getElementById('refreshLocation').disabled = false;
                
            } else {
                alert('Failed to start tracking: ' + (result.message || 'Unknown error'));
            }
            
        } catch (error) {
            console.error('Start tracking error:', error);
            alert('Failed to start tracking, please check network connection');
        } finally {
            this.showLoading(false);
        }
    }
    
    async stopTracking() {
        if (!this.sessionId) return;
        
        try {
            const response = await fetch('/Driver/StopTracking', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(this.sessionId)
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.isTracking = false;
                this.sessionId = null;
                
                // Stop location watch
                if (this.watchId) {
                    navigator.geolocation.clearWatch(this.watchId);
                    this.watchId = null;
                }
                
                this.updateTrackingStatus('Stopped', false);
                
                document.getElementById('startTracking').disabled = false;
                document.getElementById('stopTracking').disabled = true;
                document.getElementById('refreshLocation').disabled = true;
                document.getElementById('locationInfo').style.display = 'none';
                
            } else {
                alert('Failed to stop tracking: ' + (result.message || 'Unknown error'));
            }
            
        } catch (error) {
            console.error('Stop tracking error:', error);
            alert('Failed to stop tracking, please check network connection');
        }
    }
    
    startLocationWatch() {
        const options = {
            enableHighAccuracy: true,
            timeout: 60000,
            maximumAge: 0
        };
        
        // Try to get high accuracy location continuously  
        this.tryGetHighAccuracyLocation(options);
        
        // Update location every 10 seconds
        this.watchId = setInterval(() => {
            if (this.isTracking) {
                this.tryGetHighAccuracyLocation(options);
            }
        }, 10000); // 10 seconds
    }
    
    refreshLocation() {
        if (!this.isTracking) return;
        
        this.showLoading(true);
        const options = {
            enableHighAccuracy: true,
            timeout: 60000,
            maximumAge: 0
        };
        
        this.tryGetHighAccuracyLocation(options);
    }
    
    tryGetHighAccuracyLocation(options) {
        let attemptCount = 0;
        const maxAttempts = 3;
        
        const attemptLocation = () => {
            attemptCount++;
            console.log(`GPS location attempt ${attemptCount}/${maxAttempts}`);
            
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const accuracy = position.coords.accuracy;
                    console.log(`GPS accuracy: ${accuracy}m`);
                    
                    // If accuracy is good enough (less than 100m) or max attempts reached, use this location
                    if (accuracy <= 100 || attemptCount >= maxAttempts) {
                        this.onLocationUpdate(position);
                        if (accuracy > 100) {
                            this.showLocationWarning(accuracy);
                        }
                    } else {
                        // Accuracy not good enough, try again
                        console.log(`Accuracy not good enough (${accuracy}m), retrying in 3 seconds...`);
                        setTimeout(attemptLocation, 3000);
                    }
                },
                (error) => {
                    console.error(`GPS location attempt ${attemptCount} failed:`, error);
                    if (attemptCount < maxAttempts) {
                        setTimeout(attemptLocation, 3000);
                    } else {
                        this.onLocationError(error);
                    }
                },
                options
            );
        };
        
        attemptLocation();
    }
    
    showLocationWarning(accuracy) {
        const warningDiv = document.createElement('div');
        warningDiv.className = 'alert alert-warning mt-2';
        warningDiv.innerHTML = `
            <strong>⚠️ Low GPS Accuracy</strong><br/>
            Current accuracy: ${accuracy.toFixed(0)}m<br/>
            Suggestion: Move to an open outdoor area for better GPS signal
        `;
        
        const controlsDiv = document.querySelector('.controls');
        const existingWarning = controlsDiv.querySelector('.alert-warning');
        if (existingWarning) {
            existingWarning.remove();
        }
        controlsDiv.appendChild(warningDiv);
        
        // Auto remove warning after 10 seconds
        setTimeout(() => {
            if (warningDiv.parentNode) {
                warningDiv.remove();
            }
        }, 10000);
    }
    
    async onLocationUpdate(position) {
        const coords = position.coords;
        const lat = coords.latitude;
        const lng = coords.longitude;
        const accuracy = coords.accuracy;
        const speed = coords.speed;
        const heading = coords.heading;
        
        console.log('Location update:', lat, lng, 'accuracy:', accuracy);
        
        // Update map
        this.updateMapLocation(lat, lng, accuracy);
        
        // Update interface info
        this.updateLocationInfo(lat, lng, accuracy);
        
        // Send location to server
        if (this.sessionId) {
            await this.sendLocationToServer(lat, lng, accuracy, speed, heading);
        }
        
        this.showLoading(false);
    }
    
    onLocationError(error) {
        console.error('Location error:', error);
        
        let message = 'Location failed: ';
        switch (error.code) {
            case error.PERMISSION_DENIED:
                message += 'User denied location access permission';
                break;
            case error.POSITION_UNAVAILABLE:
                message += 'Location information unavailable';
                break;
            case error.TIMEOUT:
                message += 'Location request timeout';
                break;
            default:
                message += 'Unknown error';
                break;
        }
        
        alert(message);
        this.showLoading(false);
    }
    
    updateMapLocation(lat, lng, accuracy) {
        // Remove old marker
        if (this.currentMarker) {
            this.map.removeLayer(this.currentMarker);
        }
        
        // Add new marker
        this.currentMarker = L.marker([lat, lng])
            .addTo(this.map)
            .bindPopup(`Current Location<br/>Accuracy: ${accuracy.toFixed(0)}m`)
            .openPopup();
        
        // Add accuracy circle
        L.circle([lat, lng], {
            radius: accuracy,
            color: '#007bff',
            fillColor: '#007bff',
            fillOpacity: 0.1
        }).addTo(this.map);
        
        // Add to path
        this.locationHistory.push([lat, lng]);
        
        if (this.trackingPath) {
            this.map.removeLayer(this.trackingPath);
        }
        
        if (this.locationHistory.length > 1) {
            this.trackingPath = L.polyline(this.locationHistory, {
                color: '#ff6b6b',
                weight: 4,
                opacity: 0.8
            }).addTo(this.map);
        }
        
        // Adjust map view
        this.map.setView([lat, lng], Math.max(15, this.map.getZoom()));
    }
    
    updateLocationInfo(lat, lng, accuracy) {
        document.getElementById('currentLat').textContent = lat.toFixed(6);
        document.getElementById('currentLng').textContent = lng.toFixed(6);
        document.getElementById('currentAccuracy').textContent = accuracy.toFixed(0);
        document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
        document.getElementById('locationInfo').style.display = 'block';
    }
    
    async sendLocationToServer(lat, lng, accuracy, speed, heading) {
        try {
            const response = await fetch('/Driver/UpdateLocation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    sessionId: this.sessionId,
                    latitude: lat,
                    longitude: lng,
                    accuracy: accuracy,
                    speed: speed,
                    heading: heading
                })
            });
            
            const result = await response.json();
            
            if (!result.success) {
                console.error('Location upload failed:', result.message);
            }
            
        } catch (error) {
            console.error('Location upload error:', error);
        }
    }
    
    updateTrackingStatus(status, isActive) {
        const statusElement = document.getElementById('trackingStatus');
        statusElement.innerHTML = `<i class="fas fa-circle"></i> Status: ${status}`;
        
        if (isActive) {
            statusElement.className = 'status-info status-active';
        } else {
            statusElement.className = 'status-info status-inactive';
        }
    }
    
    showLoading(show) {
        document.getElementById('loadingDiv').style.display = show ? 'block' : 'none';
    }
}

// Initialize tracker after page load
document.addEventListener('DOMContentLoaded', function() {
    window.gpsTracker = new GPSTracker();
});
</script>
} 